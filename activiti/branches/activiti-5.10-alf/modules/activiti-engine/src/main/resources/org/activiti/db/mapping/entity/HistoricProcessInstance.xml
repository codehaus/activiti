<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">

  <!-- HISTORIC PROCESS INSTANCE INSERT -->
  
  <insert id="insertHistoricProcessInstance" parameterType="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">
      insert into ${prefix}ACT_HI_PROCINST (
        ID_,
        PROC_INST_ID_,
        BUSINESS_KEY_,
        PROC_DEF_ID_,
        START_TIME_,
        END_TIME_,
        DURATION_,
        START_USER_ID_,
        START_ACT_ID_,
        END_ACT_ID_,
        SUPER_PROCESS_INSTANCE_ID_,
        DELETE_REASON_
      ) values (
        #{id ,jdbcType=VARCHAR},
        #{processInstanceId, jdbcType=VARCHAR},
        #{businessKey, jdbcType=VARCHAR},
        #{processDefinitionId, jdbcType=VARCHAR},
        #{startTime, jdbcType=TIMESTAMP},
        #{endTime, jdbcType=TIMESTAMP},
        #{durationInMillis ,jdbcType=BIGINT},
        #{startUserId, jdbcType=VARCHAR},
        #{startActivityId, jdbcType=VARCHAR},
        #{endActivityId, jdbcType=VARCHAR},
        #{superProcessInstanceId, jdbcType=VARCHAR},
        #{deleteReason, jdbcType=VARCHAR}
      )
  </insert>

  <!-- HISTORIC PROCESS INSTANCE UPDATE -->
  
  <update id="updateHistoricProcessInstance" parameterType="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">
    update ${prefix}ACT_HI_PROCINST set
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      START_TIME_ = #{startTime, jdbcType=TIMESTAMP},
      END_TIME_ = #{endTime, jdbcType=TIMESTAMP},
      DURATION_ = #{durationInMillis ,jdbcType=BIGINT},
      END_ACT_ID_ = #{endActivityId, jdbcType=VARCHAR},
      DELETE_REASON_ = #{deleteReason, jdbcType=VARCHAR}
    where ID_ = #{id}
  </update>

  <!-- HISTORIC PROCESS INSTANCE DELETE -->
  
  <delete id="deleteHistoricProcessInstance">
    delete from ${prefix}ACT_HI_PROCINST where PROC_INST_ID_ = #{processInstanceId}
  </delete>

  <!-- HISTORIC PROCESS INSTANCE RESULT MAP -->
  
  <resultMap id="historicProcessInstanceResultMap" type="org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="businessKey" column="BUSINESS_KEY_" jdbcType="VARCHAR"/>
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="startUserId" column="START_USER_ID_" jdbcType="VARCHAR" />
    <result property="startActivityId" column="START_ACT_ID_" jdbcType="VARCHAR" />
    <result property="endActivityId" column="END_ACT_ID_" jdbcType="VARCHAR" />
    <result property="superProcessInstanceId" column="SUPER_PROCESS_INSTANCE_ID_" jdbcType="VARCHAR" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
  </resultMap>

  <!-- HISTORIC PROCESS INSTANCE SELECT -->
  
  <select id="selectHistoricProcessInstance" resultMap="historicProcessInstanceResultMap">
    select * from ${prefix}ACT_HI_PROCINST where PROC_INST_ID_ = #{processInstanceId}
  </select>

  <select id="selectHistoricProcessInstanceIdsByProcessDefinitionId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultType="string">
  	${limitBefore}
    select ID_
    from ${prefix}ACT_HI_PROCINST 
    where PROC_DEF_ID_ = #{parameter}
    ${limitAfter}
  </select>
  

  <select id="selectHistoricProcessInstancesByQueryCriteria" parameterType="org.activiti.engine.impl.HistoricProcessInstanceQueryImpl" resultMap="historicProcessInstanceResultMap">
  	${limitBefore}
    select *
    <include refid="selectHistoricProcessInstancesByQueryCriteriaSql"/>
    <if test="orderBy != null">
      order by ${orderBy}
    </if>
    ${limitAfter}
  </select>
  
  <select id="selectHistoricProcessInstanceCountByQueryCriteria" parameterType="org.activiti.engine.impl.HistoricProcessInstanceQueryImpl" resultType="long">
    select count(*)
    <include refid="selectHistoricProcessInstancesByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectHistoricProcessInstancesByQueryCriteriaSql">
    from ${prefix}ACT_HI_PROCINST HPI
    <if test="processKeyNotIn != null || processDefinitionKey != null">
    	inner join ${prefix}ACT_RE_PROCDEF DEF on HPI.PROC_DEF_ID_ = DEF.ID_
    </if>
    <where>
      <if test="processInstanceId != null">
        HPI.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceIds != null and !processInstanceIds.isEmpty()">
        and HPI.PROC_INST_ID_ in
        <foreach item="item" index="index" collection="processInstanceIds" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="processDefinitionId != null">
        and HPI.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and HPI.PROC_DEF_ID_ like #{processDefinitionIdLike}
      </if>
      <if test="businessKey != null">
        and HPI.BUSINESS_KEY_ = #{businessKey}
      </if>
      <if test="startDateOn">
        and HPI.START_TIME_ &gt;= #{startDateOnBegin}
        and HPI.START_TIME_ &lt;= #{startDateOnEnd}
      </if>
      <if test="finishDateOn">
        and HPI.END_TIME_ &gt;= #{finishDateOnBegin}
        and HPI.END_TIME_ &lt;= #{finishDateOnEnd}
      </if>
      <if test="finishDateBy">
        and HPI.END_TIME_ &lt;= #{finishDateBy}
      </if>
      <if test="startDateBy">
        and HPI.START_TIME_ &gt;= #{startDateBy}
      </if>
      <if test="unfinished">
        and HPI.END_TIME_ IS NULL
      </if>
      <if test="finished">
        and HPI.END_TIME_ is not NULL
      </if>
      <if test="startedBy != null">
        and HPI.START_USER_ID_ = #{startedBy}
      </if>
      <if test="superProcessInstanceId != null">
        and HPI.SUPER_PROCESS_INSTANCE_ID_ = #{superProcessInstanceId}
      </if>
         <if test="startedBefore != null">
        and HPI.START_TIME_ &lt;= #{startedBefore}
      </if>
      <if test="startedAfter != null">
        and HPI.START_TIME_ &gt;= #{startedAfter}
      </if>
      <if test="finishedBefore != null">
        and HPI.END_TIME_ &lt;= #{finishedBefore}
      </if>
      <if test="finishedAfter != null">
        and HPI.END_TIME_ &gt;= #{finishedAfter}
      </if>
      <if test="processDefinitionKey != null">
      		and DEF.KEY_ = #{processDefinitionKey}
      </if>
      <if test="processKeyNotIn != null">
      	<foreach collection="processKeyNotIn" index="index" item="procDefKey">
	   		and DEF.KEY_ not like #{procDefKey}
	  	</foreach>
      </if>
      
      <!-- Variables -->
      <foreach collection="queryVariableValues" index="index" item="var">
        and exists (
          select HD.ID_ 
          from ${prefix}ACT_HI_DETAIL HD 
          where
            HD.TYPE_ = 'VariableUpdate' 
            and HD.NAME_ =  #{var.name}
            and HD.PROC_INST_ID_ = HPI.PROC_INST_ID_ and HD.TASK_ID_ is null
            and HD.REV_ = (select max(HDM.REV_) from ${prefix}ACT_HI_DETAIL HDM where HDM.PROC_INST_ID_ = HPI.PROC_INST_ID_ and HDM.TASK_ID_ is null and HDM.VAR_TYPE_ = #{var.type} and HDM.NAME_ = #{var.name} and HDM.TYPE_ = 'VariableUpdate')
            and HD.TIME_ = (select max(HDM.TIME_) from ${prefix}ACT_HI_DETAIL HDM where HDM.PROC_INST_ID_ = HPI.PROC_INST_ID_ and HDM.TASK_ID_ is null and HDM.VAR_TYPE_ = #{var.type} and HDM.NAME_ = #{var.name} and HDM.TYPE_ = 'VariableUpdate')

            <if test="!var.type.equals('null')">
              and HD.VAR_TYPE_ = #{var.type}
            </if>
            <!-- Variable value -->
            <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
              and HD.TEXT_ 
              <choose>
	            <when test="var.operator.equals('LIKE')">LIKE</when>
	            <otherwise><include refid="executionVariableOperator" /></otherwise>
	          </choose>
               #{var.textValue}
            </if>
            <if test="var.textValue2 != null">
              and HD.TEXT2_
              <choose>
	            <when test="var.operator.equals('LIKE')">LIKE</when>
	            <otherwise><include refid="executionVariableOperator" /></otherwise>
	          </choose>               
               #{var.textValue2}
            </if>
            <if test="var.longValue != null">
              and HD.LONG_
              <include refid="executionVariableOperator" /> 
               #{var.longValue}
            </if>
            <if test="var.doubleValue != null">
              and HD.DOUBLE_
              <include refid="executionVariableOperator" /> 
               #{var.doubleValue}
            </if>
            <!-- Null variable type -->
            <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
              and HD.TEXT_ is null and HD.TEXT2_ is null and HD.LONG_ is null and HD.DOUBLE_ is null and HD.BYTEARRAY_ID_ is null
            </if>
        )
      </foreach>      
    </where>
  </sql>

  <sql id="executionVariableOperator">
    <choose>
   	  <when test="var.operator.equals('EQUALS')">=</when>
   	  <when test="var.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
   	  <when test="var.operator.equals('GREATER_THAN')">&gt;</when>
   	  <when test="var.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
   	  <when test="var.operator.equals('LESS_THAN')">&lt;</when>
   	  <when test="var.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>

</mapper>
